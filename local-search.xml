<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>包装类型的缓存机制</title>
    <link href="/2025/09/23/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <url>/2025/09/23/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="包装类型的缓存机制"><a href="#包装类型的缓存机制" class="headerlink" title="包装类型的缓存机制"></a>包装类型的缓存机制</h1><p>Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。</p><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，<code>Character</code> 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，<code>Boolean</code> 直接返回 <code>TRUE</code> or <code>FALSE</code>。</p><p>对于 <code>Integer</code>，可以通过 JVM 参数 <code>-XX:AutoBoxCacheMax=&lt;size&gt;</code> 修改缓存上限，但不能修改下限 -128。实际使用时，并不建议设置过大的值，避免浪费内存，甚至是 OOM。</p><p>对于<code>Byte</code>,<code>Short</code>,<code>Long</code> ,<code>Character</code> 没有类似 <code>-XX:AutoBoxCacheMax</code> 参数可以修改，因此缓存范围是固定的，无法通过 JVM 参数调整。<code>Boolean</code> 则直接返回预定义的 <code>TRUE</code> 和 <code>FALSE</code> 实例，没有缓存范围的概念。</p><p><strong>Integer 缓存源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>    <span class="hljs-comment">// IntegerCache.cache 是一个静态数组，里面预先存好了 -128 到 127 的 Integer 实例。</span><br>    <span class="hljs-comment">// i + 128 是因为数组下标从 0 开始：i = -128 时，下标 = 0; i = 127 时，下标 = 255</span><br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br><br><span class="hljs-comment">// 私有静态内部类</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerCache</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> high;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">126</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">126</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><br>        System.out.println(a == b); <span class="hljs-comment">// true  缓存命中</span><br>        System.out.println(c == d); <span class="hljs-comment">// false 超出缓存范围</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>a</code> 和 <code>b</code> 指向同一对象，<code>==</code> 为 <code>true</code>。</li><li><code>c</code> 和 <code>d</code> 超出缓存范围，各自 new 了对象，<code>==</code> 为 <code>false</code>。</li></ul><p><strong>包装类型缓存机制  ⇒小范围的数值对象被预先创建并复用</strong>。</p><p>这样做节省内存和提高效率，但比较时仍推荐使用<code>equals()</code>,以避免因缓存范围不同带来的“&#x3D;&#x3D;”误判。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的执行过程</title>
    <link href="/2025/09/18/Java%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"/>
    <url>/2025/09/18/Java%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java的执行过程"><a href="#Java的执行过程" class="headerlink" title="Java的执行过程"></a>Java的执行过程</h1><h1 id="Java的执行过程-1"><a href="#Java的执行过程-1" class="headerlink" title="Java的执行过程"></a>Java的执行过程</h1><p>Java的执行过程整体可以分为两个部分：</p><p>第一步由javac将<strong>源码编译成字节码（Bytecode）</strong>，在这个过程中会进行词法分析、语法分析、语义分析，编译原理中这部分的编译称为前端编译。</p><p>接下来无需编译直接逐条将字节码解释执行，在解释执行的过程中，虚拟机同时对程序运行的信息进行收集，在这些信息的基础上，编译器会逐渐发挥作用，它会进行后端编译——把<strong>字节码编译成机器码</strong>，但不是所有的代码都会被编译，只有被JVM认定为的热点代码，才可能被编译。</p><p>怎么样才会被认为是**<code>热点代码</code><strong>呢？JVM中会设置一个</strong>阈值**，当方法或者代码块的在一定时间内的调用次数超过这个阈值时就会被编译，存入<code>codeCache</code>中。当下次执行时，再遇到这段代码，就会从codeCache中读取机器码，直接执行，以此来提升程序运行的性能。整体的执行过程大致如下图所示：</p><p><img src="/2025/09/18/Java%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/image.png" alt="image.png"></p><p><strong>JVM 会动态决定解释执行还是 JIT 编译。</strong>（Java 程序后期越跑越快的原因）</p><h1 id="JIT-即时编译"><a href="#JIT-即时编译" class="headerlink" title="JIT-即时编译"></a><strong>JIT-即时编译</strong></h1><p><strong>（Just in Time Compilation）</strong></p><p>Java虚拟机根据方法的调用次数以及循环回边的执行次数来触发即时编译。循环回边是一个控制流图中的概念，程序中可以简单理解为往回跳转的指令，比如下面这段代码：</p><p>循环回边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">publicvoidnlp(Object obj) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">200</span>; i++) &#123;<br>    sum += i;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这段代码经过编译生成下面的字节码。其中，偏移量为18的字节码将往回跳至偏移量为4的字节码中。在解释执行时，每当运行一次该指令，Java虚拟机便会将该方法的循环回边计数器加1。</p><p>字节码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">public void nlp(java.lang.Object);<br>    Code:<br>       0: iconst_0<br>       1: istore_1<br>       2: iconst_0<br>       3: istore_2<br>       4: iload_2<br>       5: sipush        200<br>       8: if_icmpge     21<br>      11: iload_1<br>      12: iload_2<br>      13: iadd<br>      14: istore_1<br>      15: iinc          2, 1<br>      18: goto          4<br>      21: <span class="hljs-built_in">return</span><br></code></pre></td></tr></table></figure><p>在即时编译过程中，编译器会识别循环的头部和尾部。上面这段字节码中，循环体的头部和尾部分别为偏移量为11的字节码和偏移量为15的字节码。编译器将在循环体结尾增加循环回边计数器的代码，来对循环进行计数。</p><p>当方法的调用次数和循环回边的次数的和，超过由参数-XX:CompileThreshold指定的阈值时（使用C1时，默认值为1500；使用C2时，默认值为10000），就会触发即时编译。</p><p>开启分层编译的情况下，-XX:CompileThreshold参数设置的阈值将会失效，触发编译会由以下的条件来判断：</p><ul><li>方法调用次数大于由参数-XX:TierXInvocationThreshold指定的阈值乘以系数。</li><li>方法调用次数大于由参数-XX:TierXMINInvocationThreshold指定的阈值乘以系数，并且方法调用次数和循环回边次数之和大于由参数-XX:TierXCompileThreshold指定的阈值乘以系数时。</li></ul><p>分层编译触发条件公式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">i &gt; TierXInvocationThreshold * s || (i &gt; TierXMinInvocationThreshold * s  &amp;&amp; i + b &gt; TierXCompileThreshold * s) <br>i为调用次数，b是循环回边次数<br></code></pre></td></tr></table></figure><p>上述满足其中一个条件就会触发即时编译，并且JVM会根据当前的编译方法数以及编译线程数动态调整系数s。</p><h1 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h1><p>即时编译器会对正在运行的服务进行一系列的优化，包括字节码解析过程中的分析，根据编译过程中代码的一些中间形式来做局部优化，还会根据程序依赖图进行全局优化，最后才会生成机器码。</p><p><strong>1.中间表达形式（Intermediate Representation）IR</strong></p><p>在编译原理中，通常把编译器分为前端和后端，前端编译经过词法分析、语法分析、语义分析生成中间表达形式（Intermediate Representation，以下称为IR），后端会对IR进行优化，生成目标代码。</p><p>Java字节码就是一种IR，但是字节码的结构复杂，字节码这样代码形式的IR也不适合做全局的分析优化。现代编译器一般采用图结构的IR，静态单赋值（Static Single Assignment，SSA）IR是目前比较常用的一种。这种IR的特点是每个变量只能被赋值一次，而且只有当变量被赋值之后才能使用。</p><p>SSA IR</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&#123;<br>  a <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>  a <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>  b <span class="hljs-operator">=</span> a<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中我们可以轻易地发现a &#x3D; 1的赋值是冗余的，但是编译器不能。传统的编译器需要借助数据流分析，从后至前依次确认哪些变量的值被覆盖掉。不过，如果借助了SSA IR，编译器则可以很容易识别冗余赋值。</p><p>上面代码的SSA IR形式的伪代码可以表示为：</p><p>SSA IR</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&#123;<br>  a_1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>  a_2 <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>  b_1 <span class="hljs-operator">=</span> a_2<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由于SSA IR中每个变量只能赋值一次，所以代码中的a在SSA IR中会分成a_1、a_2两个变量来赋值，这样编译器就可以很容易通过扫描这些变量来发现a_1的赋值后并没有使用，赋值是冗余的。</p><p><strong>2.方法内联</strong></p><p>方法内联，是指在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。JIT大部分的优化都是在内联的基础上进行的，方法内联是即时编译器中非常重要的一环。</p><p><strong>3. 逃逸分析</strong></p><p>逃逸分析是“一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针”。Java虚拟机的即时编译器会对新建的对象进行逃逸分析，判断对象是否逃逸出线程或者方法。</p><p>逃逸分析通常是在方法内联的基础上进行的，即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。</p><p><strong>4. Loop Transformations</strong></p><p>C2编译器在构建Ideal Graph后会进行很多的全局优化，其中就包括对循环的转换，最重要的两种转换就是循环展开和循环分离。</p><p><strong>5. 窥孔优化与寄存器分配</strong></p><p>窥孔优化是优化的最后一步，这之后就会程序就会转换成机器码，窥孔优化就是将编译器所生成的中间代码（或目标代码）中相邻指令，将其中的某些组合替换为效率更高的指令组，常见的比如强度削减、常数合并等，看下面这个例子就是一个强度削减的例子：</p><p>强度削减</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">y1=x1*3  经过强度削减后得到  y1=(x1&lt;&lt;<span class="hljs-string">1)+x1</span><br></code></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html">基本功 | Java即时编译器原理解析及实践</a></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2025/09/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2025/09/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划（Dynamic Programming，简称 DP）是一种<strong>将复杂问题分解为更小子问题、并保存子问题结果以避免重复计算</strong>的算法思想。</p><p>它非常适合求解具有重叠子问题（overlapping subproblems）<strong>和</strong>最优子结构（optimal substructure）的问题。</p><h2 id="一、核心思想"><a href="#一、核心思想" class="headerlink" title="一、核心思想"></a>一、核心思想</h2><ol><li><p><strong>划分子问题</strong></p><p> 把原问题拆成若干个规模更小、结构相同的子问题。</p></li><li><p><strong>保存结果（记忆化）</strong></p><p> 子问题的结果会被重复用到，因此用数组或哈希表保存，避免重复计算。</p></li><li><p><strong>状态转移</strong></p><p> 找到子问题之间的递推关系（状态转移方程），逐步推导出原问题的最优解。</p></li><li><p><strong>自底向上或自顶向下</strong></p><ul><li><strong>自顶向下</strong>：递归 + 记忆化</li><li><strong>自底向上</strong>：迭代，从最小子问题开始，一步步推导更大规模的结果。</li></ul></li></ol><h2 id="二、典型步骤"><a href="#二、典型步骤" class="headerlink" title="二、典型步骤"></a>二、典型步骤</h2><ol><li><strong>定义状态</strong>：明确用什么变量表示“子问题”。</li><li><strong>写出状态转移方程</strong>：描述如何从已知状态得到新状态。</li><li><strong>初始化</strong>：确定最小子问题的解。</li><li><strong>确定计算顺序</strong>：通常是自底向上填表。</li></ol><h2 id="三、举例：斐波那契数列"><a href="#三、举例：斐波那契数列" class="headerlink" title="三、举例：斐波那契数列"></a>三、举例：斐波那契数列</h2><p><strong>问题</strong>：求第 <code>n</code> 个斐波那契数，公式为</p><p>F(n) &#x3D; F(n-1) + F(n-2)，其中 F(0)&#x3D;0, F(1)&#x3D;1。</p><h3 id="1-普通递归（低效）"><a href="#1-普通递归（低效）" class="headerlink" title="1. 普通递归（低效）"></a>1. 普通递归（低效）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">return</span> fib(n-<span class="hljs-number">1</span>) + fib(n-<span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><p>缺点：大量重复计算，时间复杂度 O(2^n)。</p><h3 id="2-动态规划（自底向上）"><a href="#2-动态规划（自底向上）" class="headerlink" title="2. 动态规划（自底向上）"></a>2. 动态规划（自底向上）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib_dp</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> n<br>    dp = [<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>], dp[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):<br>        dp[i] = dp[i-<span class="hljs-number">1</span>] + dp[i-<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">return</span> dp[n]<br><br></code></pre></td></tr></table></figure><ul><li><strong>状态定义</strong>：dp[i] 表示第 i 个斐波那契数</li><li><strong>状态转移方程</strong>：dp[i] &#x3D; dp[i-1] + dp[i-2]</li><li>时间复杂度 O(n)，空间 O(n)，也可以优化到 O(1)。</li></ul><h2 id="四、实用例子：最短路径（经典背包）"><a href="#四、实用例子：最短路径（经典背包）" class="headerlink" title="四、实用例子：最短路径（经典背包）"></a>四、实用例子：最短路径（经典背包）</h2><p><strong>问题</strong>：给定一个数组 <code>coins</code> 表示不同面值的硬币，以及一个总金额 <code>amount</code>，求凑成该金额所需的最少硬币数，如果无法凑成则返回 -1。</p><p>（这就是著名的<strong>零钱兑换问题</strong>）</p><h3 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h3><ol><li><p><strong>状态</strong>：dp[i] 表示凑成金额 i 所需的最少硬币数。</p></li><li><p><strong>转移方程</strong>：</p><p> dp[i] &#x3D; min(dp[i - coin] + 1) for coin in coins if i - coin &gt;&#x3D; 0</p></li><li><p><strong>初始化</strong>：dp[0] &#x3D; 0，其余为无穷大。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">coinChange</span>(<span class="hljs-params">coins, amount</span>):<br>    dp = [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)] * (amount + <span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, amount + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> coin <span class="hljs-keyword">in</span> coins:<br>            <span class="hljs-keyword">if</span> i - coin &gt;= <span class="hljs-number">0</span>:<br>                dp[i] = <span class="hljs-built_in">min</span>(dp[i], dp[i - coin] + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> dp[amount] <span class="hljs-keyword">if</span> dp[amount] != <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(coinChange([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], <span class="hljs-number">11</span>))  <span class="hljs-comment"># 输出 3 (11 = 5 + 5 + 1)</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>适用场景</strong>：最短路径、背包问题、最长子序列、编辑距离、股票买卖收益等。</li><li><strong>关键点</strong>：<ol><li>找到子问题</li><li>明确状态定义</li><li>写出状态转移方程</li><li>选择自顶向下或自底向上的求解方式</li></ol></li></ul><p>动态规划的本质是**“用空间换时间”**，通过存储中间结果，极大减少重复计算，从而高效求解复杂问题。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo部署</title>
    <link href="/2025/09/14/Hexo%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/09/14/Hexo%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h1><h1 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h1><p>本文使用Hexo框架，在阿里云服务器上搭建个人博客。整体思路为在本地进行Hexo安装以及平时帖子的编写，然后使用<strong>裸仓库</strong>以及Hexo的部署功能将博客部署到远程的服务器上进行访问。</p><h1 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h1><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p><a href="https://hexo.io/zh-cn/docs/">文档</a></p><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h1 id="服务器环境配置"><a href="#服务器环境配置" class="headerlink" title="服务器环境配置"></a>服务器环境配置</h1><h3 id="Step1-、安装基础软件"><a href="#Step1-、安装基础软件" class="headerlink" title="Step1 、安装基础软件"></a>Step1 、安装基础软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 一次性安装所需组件</span><br><span class="hljs-built_in">sudo</span> apt install -y git nginx nodejs npm<br><br><span class="hljs-comment"># 验证安装（应显示版本号）</span><br>git --version  <span class="hljs-comment"># 需≥2.0</span><br>nginx -v       <span class="hljs-comment"># 需显示nginx/1.18.0+</span><br>node -v        <span class="hljs-comment"># 需≥v12.0</span><br></code></pre></td></tr></table></figure><h3 id="Step2、Git裸仓库配置"><a href="#Step2、Git裸仓库配置" class="headerlink" title="Step2、Git裸仓库配置"></a>Step2、<strong>Git裸仓库配置</strong></h3><p>创建裸仓库（bare repository）<br>在 Git 里，“裸仓库（bare repository）”指的是<strong>只有 Git 版本库数据，没有工作区的仓库</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入用户主目录</span><br><span class="hljs-built_in">cd</span> ~<br><br><span class="hljs-comment"># 创建git仓库（裸仓库没有工作目录）</span><br><span class="hljs-built_in">mkdir</span> hexo.git &amp;&amp; <span class="hljs-built_in">cd</span> hexo.git<br>git init --bare  <span class="hljs-comment"># 出现Initialized空仓库提示即成功</span><br></code></pre></td></tr></table></figure><p>创建网站根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建网站存放目录</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /var/www/hexo<br></code></pre></td></tr></table></figure><p>配置自动部署钩子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建钩子文件（重要！）</span><br>nano ~/hexo.git/hooks/post-receive  <span class="hljs-comment"># 比vi更友好的编辑器</span><br><br><span class="hljs-comment"># 文件内容</span><br><span class="hljs-comment">#!/bin/bash</span><br>git --work-tree=/var/www/hexo --git-dir=/root/hexo.git checkout -f<br><br><span class="hljs-comment"># 保存方法</span><br>按Ctrl+O → 回车确认 → Ctrl+X退出<br></code></pre></td></tr></table></figure><h3 id="Step3-Nginx配置"><a href="#Step3-Nginx配置" class="headerlink" title="Step3. Nginx配置"></a>Step3. <strong>Nginx配置</strong></h3><p>创建配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/nginx/sites-available/hexo<br></code></pre></td></tr></table></figure><p>文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 80;<br>    server_name domain_name your_server_ip;  <span class="hljs-comment"># 替换为你的域名和公网IP</span><br>    root /var/www/hexo;<br><br>    location / &#123;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =404;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启用配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建符号链接（相当于创建快捷方式）</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/hexo /etc/nginx/sites-enabled/<br><br><span class="hljs-comment"># 测试配置语法（出现successful即正确）</span><br><span class="hljs-built_in">sudo</span> nginx -t<br><br><span class="hljs-comment"># 重启Nginx服务</span><br><span class="hljs-built_in">sudo</span> systemctl restart nginx<br></code></pre></td></tr></table></figure><h1 id="本地Hexo配置"><a href="#本地Hexo配置" class="headerlink" title="本地Hexo配置"></a>本地Hexo配置</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init &lt;folder&gt;<br><span class="hljs-variable">$cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></td></tr></table></figure><p>初始化后，您的项目文件夹将如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── <span class="hljs-built_in">source</span><br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><hr><p>修改<code>_config.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">hexodeploy@your_server_ip:/home/hexodeploy/hexo.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p><strong>安装部署插件:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean   <span class="hljs-comment"># 清理缓存</span><br>hexo g       <span class="hljs-comment"># 生成静态文件（generate缩写）</span><br>hexo d       <span class="hljs-comment"># 部署（deploy缩写）</span><br></code></pre></td></tr></table></figure><h1 id="最终验证"><a href="#最终验证" class="headerlink" title="最终验证"></a>最终验证</h1><ol><li>浏览器访问：<code>https://你的服务器IP</code> 或域名</li><li>服务器查看日志：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f /var/log/nginx/access.log<br></code></pre></td></tr></table></figure><p><img src="/2025/09/14/Hexo%E9%83%A8%E7%BD%B2/image01.png" alt="部署效果"></p><h1 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h1><p>参考：</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p><a href="https://webfem.com/post/web-analyse">如何给网站添加免费数据统计 - webfem</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://zbshlv.fun/2025/03/06/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/">hexo部署到服务器上</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/09/14/hello-world/"/>
    <url>/2025/09/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
